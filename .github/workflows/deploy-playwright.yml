name: Deploy and Run Playwright Tests on EKS

on:
  push:
    branches:
      - main

jobs:
  build-and-run-tests:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the latest code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region us-east-2

    # Step 3: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: private

    # Step 4: Build and push the Docker image to Amazon ECR
    - name: Build and push Docker image
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: us-east-2
      run: |
        IMAGE_NAME=playwright-tests
        IMAGE_TAG=$(date +%s)

        # Build the Docker image
        docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG .

        # Push the Docker image to Amazon ECR
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG

        # Save the image tag for the next steps
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    # Step 5: Deploy and run Playwright tests on EKS
    - name: Run Playwright tests on EKS
      env:
        AWS_REGION: us-east-2
        EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        # Update kubeconfig to connect to the EKS cluster
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

        # Define the Kubernetes Job manifest
        cat <<EOF > playwright-job.yaml
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: playwright-tests-job
        spec:
          backoffLimit: 0
          template:
            spec:
              containers:
              - name: playwright
                image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/playwright-tests:$IMAGE_TAG
                command: ["npx", "playwright", "test", "--reporter=json"]
                volumeMounts:
                  - name: test-results-volume
                    mountPath: /app/test-results
              restartPolicy: Never
              volumes:
                - name: test-results-volume
                  emptyDir: {}
        EOF

        # Apply the Job manifest to the EKS cluster
        kubectl apply -f playwright-job.yaml

        # Wait for the Job to complete
        kubectl wait --for=condition=complete job/playwright-tests-job --timeout=300s

        # Copy test results from the Job's Pod to the local machine
        POD_NAME=$(kubectl get pods --selector=job-name=playwright-tests-job --output=jsonpath='{.items[0].metadata.name}')
        kubectl cp $POD_NAME:/app/test-results ./test-results

    # Step 6: Upload test results directory to S3
    # Test
    - name: Upload test results to S3
      env:
        AWS_REGION: us-east-2
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      run: |
        # Check if the test results directory exists
        if [ -d "test-results" ]; then
          # Upload the entire test results directory to S3
          aws s3 cp test-results s3://$S3_BUCKET_NAME/test-results/ --recursive
        else
          echo "Test results directory not found. Skipping upload."
        fi